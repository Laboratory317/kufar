#include <QueueArray.h>
#include <SPI.h>
#include <Wire.h>
#include <nRF24L01.h>
#include "RF24.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include<Servo.h>
Servo servos[3];

#define FB_D             	 A0  // pin feedback door - A0
#define FB_L             	 A1  // pin feedback lock - A1
#define BATTERY_ADC          A2  // pin voltage battery read - A2 delitel 
#define buzzer               7   // pin buzzer 
#define SERVO_DOOR_ENABLE    A3  // pin MOSFET enable power servo - A3, resistor GND
#define SERVO_LOCK_ENABLE    A4  // pin MOSFET enable power servos - A4 
#define TILT_AMPULA      	 6   // pin tilt ampula input , GND -> 7 pin
#define RF_signal        	 2   // pin from RF receiver / 1 for available 

#define DOOR_LEVEL_CLOSED 10     // min position servo door closed
#define DOOR_LEVEL_OPEN   146   // max 
#define AC_ANGLE          138   // trigger angle 
#define UNSECURE  1
#define SECURE    0


// DEBUG DEFINES
#define DEBUG_SERVOS_P
//#define DEBUG_EXP
//#define DEBUG_MOTION
#define DISABLE_LOCK


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin #4 (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
bool SCREEN_ALLOCATION = false;

const unsigned char icon_lock [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00,
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x70, 0x0e, 0x00,
  0x00, 0x60, 0x06, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x67, 0xe6, 0x00, 0x00, 0x7f, 0xfe, 0x00,
  0x00, 0x78, 0x1e, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x01, 0x80, 0x01, 0x80,
  0x01, 0x80, 0x01, 0x80, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x01, 0x80, 0xc0, 0x03, 0x03, 0xc0, 0xc0,
  0x03, 0x03, 0xc0, 0xc0, 0x03, 0x01, 0x80, 0xc0, 0x03, 0x01, 0x80, 0xc0, 0x01, 0x81, 0x81, 0x80,
  0x01, 0x81, 0x81, 0x80, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x78, 0x1e, 0x00,
  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char gears_array[14][120] PROGMEM = {
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3e, 0x00,
    0x00, 0x03, 0xff, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x07, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xe0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xe3, 0xf0,
    0x00, 0xf3, 0xff, 0xe0, 0x00, 0xf1, 0x3e, 0x40, 0x00, 0xf0, 0x1e, 0x00, 0x19, 0xfb, 0x9e, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x1e, 0x07, 0x80, 0x00,
    0x0e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0x00, 0x00, 0x1e, 0x07, 0x80, 0x00, 0x3f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x09, 0xf9, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
  }, /*{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x9e, 0x00,
    0x00, 0x03, 0xff, 0x60, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x03, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xf0,
    0x00, 0xe3, 0xff, 0xe0, 0x01, 0xe0, 0x3f, 0xc0, 0x01, 0xf1, 0x3c, 0x00, 0x01, 0xff, 0xbc, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0x80, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x1e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x1f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
  },*/
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xdf, 0x00,
    0x00, 0x03, 0xff, 0x00, 0x00, 0x01, 0xf7, 0xe0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x01, 0x80, 0xe0, 0x00, 0x07, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xc0,
    0x00, 0xc2, 0x7f, 0xe0, 0x03, 0xe0, 0x3f, 0xc0, 0x03, 0xe6, 0x7c, 0xc0, 0x03, 0xff, 0xb8, 0x00,
    0x17, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0x80, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x3e, 0x07, 0x80, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x04, 0x7c, 0x00, 0x00,
    0x00, 0x7c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xc7, 0x80, 0x00, 0x01, 0xff, 0x00,
    0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xf7, 0x80, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xc0,
    0x00, 0x80, 0x7f, 0xc0, 0x03, 0xc4, 0x7f, 0xe0, 0x07, 0xef, 0x79, 0x80, 0x03, 0xff, 0xb0, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x3f, 0xdf, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x0f, 0xfe, 0x80, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x07, 0x3e, 0x00, 0x00,
    0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe7, 0x80, 0x00, 0x01, 0xff, 0x80,
    0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x03, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x00, 0xe3, 0x80,
    0x00, 0x00, 0x7f, 0xc0, 0x03, 0x8c, 0xff, 0xc0, 0x07, 0xdf, 0xf3, 0xc0, 0x07, 0xff, 0x21, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x07, 0xde, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0xc0, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x07, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x07, 0x3e, 0x00, 0x00,
    0x03, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xf3, 0x80, 0x00, 0x00, 0xff, 0xc0,
    0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x01, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x00, 0xe3, 0x80,
    0x00, 0x00, 0xff, 0x80, 0x03, 0x1d, 0xff, 0x80, 0x0f, 0xbf, 0xf3, 0xc0, 0x0f, 0xfe, 0x23, 0x00,
    0x0f, 0xfe, 0x00, 0x00, 0x07, 0xde, 0x00, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x1f, 0x0f, 0x00, 0x00,
    0x07, 0xfe, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0x9f, 0x00, 0x00,
    0x03, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xf1, 0x80, 0x00, 0x00, 0x7f, 0xc0,
    0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x00, 0xe3, 0xa0,
    0x00, 0x11, 0xff, 0x80, 0x02, 0x3d, 0xff, 0x80, 0x0f, 0x7e, 0xe7, 0x80, 0x1f, 0xfc, 0x47, 0x00,
    0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xde, 0x00, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x1e, 0x07, 0xc0, 0x00,
    0x7e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xce, 0x00, 0x00,
    0x03, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x78, 0x80, 0x00, 0x00, 0x7f, 0xc0,
    0x00, 0x00, 0x7f, 0xe0, 0x00, 0x03, 0xf7, 0xc0, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x07, 0x80, 0xe0, 0x00, 0x01, 0xc0, 0xf0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xe3, 0xf0,
    0x00, 0x33, 0xff, 0x80, 0x00, 0x7d, 0xff, 0x00, 0x0e, 0x7c, 0xcf, 0x00, 0x1f, 0xfc, 0x07, 0x00,
    0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xdf, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0x80, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x3f, 0xff, 0x80, 0x00, 0x03, 0xff, 0x80, 0x00, 0x03, 0xff, 0x00, 0x00, 0x03, 0xe6, 0x00, 0x00,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3e, 0xc0,
    0x00, 0x02, 0x7f, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xf0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x03, 0xe3, 0xe0,
    0x00, 0x73, 0xff, 0xe0, 0x00, 0x79, 0xfe, 0x00, 0x0c, 0xf8, 0x0f, 0x00, 0x1f, 0xf8, 0x0e, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x1f, 0xdf, 0xc0, 0x00, 0x1f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00,
    0x0e, 0x07, 0x80, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x80, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x17, 0xff, 0x80, 0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xf1, 0x00, 0x00,
    0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3e, 0x40,
    0x00, 0x03, 0xff, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc0, 0xc0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xe0, 0x00, 0x03, 0xc1, 0xf0, 0x00, 0x03, 0xe3, 0xe0,
    0x00, 0x73, 0xff, 0xe0, 0x00, 0xf1, 0xbe, 0x00, 0x00, 0xf0, 0x1e, 0x00, 0x1d, 0xf9, 0x1e, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x1e, 0x07, 0xc0, 0x00,
    0x0e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0x00, 0x00, 0x3e, 0x07, 0x80, 0x00, 0x3f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x01, 0xf9, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x3e, 0x00,
    0x00, 0x01, 0xff, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xe0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xe0, 0x00, 0x03, 0xe3, 0xf0,
    0x00, 0x63, 0xff, 0xe0, 0x01, 0xf0, 0x3e, 0xc0, 0x01, 0xf0, 0x3c, 0x00, 0x11, 0xff, 0x3c, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x3e, 0x07, 0x80, 0x00,
    0x1e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x1e, 0x07, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x0d, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0xdf, 0x00,
    0x00, 0x01, 0xff, 0x00, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x01, 0x80, 0xe0, 0x00, 0x03, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xe0,
    0x00, 0x42, 0xff, 0xe0, 0x03, 0xe0, 0x3f, 0xc0, 0x03, 0xe3, 0x3c, 0x80, 0x03, 0xff, 0x78, 0x00,
    0x17, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0x80, 0x00, 0x3f, 0x0f, 0x80, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x3e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x1f, 0x0f, 0xc0, 0x00,
    0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xfc, 0x80, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x04, 0x7c, 0x00, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x87, 0x80, 0x00, 0x01, 0xff, 0x00,
    0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xf7, 0xe0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x03, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xc0,
    0x00, 0x80, 0x7f, 0xe0, 0x03, 0xc0, 0x7f, 0xc0, 0x07, 0xe6, 0x78, 0x80, 0x03, 0xff, 0xf8, 0x00,
    0x07, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x7e, 0x07, 0xc0, 0x00, 0x1e, 0x07, 0xe0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x1f, 0xfe, 0xc0, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x06, 0x3c, 0x00, 0x00,
    0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x80, 0x00, 0x01, 0xff, 0x80,
    0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x01, 0xe3, 0x80,
    0x00, 0x00, 0x7f, 0xc0, 0x03, 0x84, 0xff, 0xc0, 0x07, 0xce, 0xf1, 0x80, 0x07, 0xff, 0xb0, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x07, 0xdf, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0x80, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x1e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x07, 0x3e, 0x00, 0x00,
    0x02, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x80, 0x00, 0x00, 0xff, 0xc0,
    0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x00, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x00, 0xe3, 0x80,
    0x00, 0x00, 0xff, 0x80, 0x03, 0x0c, 0xff, 0xc0, 0x0f, 0x9f, 0xf3, 0x80, 0x0f, 0xff, 0x61, 0x00,
    0x07, 0xfe, 0x00, 0x00, 0x07, 0xde, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x7e, 0x07, 0xe0, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0x00, 0x00,
    0x07, 0xfe, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x07, 0x9e, 0x00, 0x00,
    0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xf1, 0x80, 0x00, 0x00, 0xff, 0xc0,
    0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xe0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x00, 0xe3, 0x80,
    0x00, 0x00, 0xff, 0x80, 0x02, 0x1d, 0xff, 0x80, 0x0f, 0x3e, 0xe7, 0x80, 0x1f, 0xfe, 0x42, 0x00,
    0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xde, 0x00, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x1e, 0x07, 0xe0, 0x00,
    0x7e, 0x07, 0xc0, 0x00, 0x7e, 0x07, 0xe0, 0x00, 0x3e, 0x07, 0x80, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xce, 0x00, 0x00,
    0x03, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x78, 0x80, 0x00, 0x00, 0x7f, 0xc0,
    0x00, 0x00, 0x7f, 0xe0, 0x00, 0x02, 0xf7, 0xc0, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x01, 0xc0, 0xf0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xe3, 0xf0,
    0x00, 0x01, 0xff, 0x80, 0x00, 0x3d, 0xff, 0x00, 0x0e, 0x7e, 0xcf, 0x80, 0x1f, 0xfc, 0x06, 0x00,
    0x1f, 0xfe, 0x00, 0x00, 0x0f, 0xdf, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00,
    0x3e, 0x07, 0xe0, 0x00, 0x7e, 0x07, 0x80, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x3f, 0xff, 0x80, 0x00, 0x03, 0xff, 0x80, 0x00, 0x03, 0xff, 0x00, 0x00, 0x03, 0xe6, 0x00, 0x00,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x3e, 0xc0,
    0x00, 0x00, 0x7f, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x03, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xf0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x01, 0xe3, 0xe0,
    0x00, 0x23, 0xff, 0xa0, 0x00, 0x7d, 0xff, 0x00, 0x0c, 0x7c, 0x8f, 0x00, 0x1f, 0xfc, 0x0f, 0x00,
    0x1f, 0xfe, 0x80, 0x00, 0x1f, 0xdf, 0xc0, 0x00, 0x1f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xe0, 0x00,
    0x1e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x7e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x80, 0x00,
    0x3f, 0xff, 0x80, 0x00, 0x03, 0xff, 0x80, 0x00, 0x03, 0xff, 0x00, 0x00, 0x03, 0xe2, 0x00, 0x00,
    0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3e, 0x40,
    0x00, 0x01, 0x7f, 0xe0, 0x00, 0x03, 0xf7, 0xf0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc0, 0xc0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xe0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x03, 0xe3, 0xf0,
    0x00, 0x23, 0xff, 0xe0, 0x00, 0xf9, 0xbe, 0x00, 0x00, 0xf8, 0x1e, 0x00, 0x1d, 0xf8, 0x9e, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x1e, 0x07, 0xc0, 0x00,
    0x0e, 0x07, 0x80, 0x00, 0x1e, 0x07, 0x00, 0x00, 0x3e, 0x07, 0x80, 0x00, 0x3f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x01, 0xfb, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00,
    0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x01, 0x1e, 0x00,
    0x00, 0x01, 0xff, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xe0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xc0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xe3, 0xf0,
    0x00, 0xa3, 0xff, 0xe0, 0x00, 0xf1, 0x3e, 0x40, 0x01, 0xf0, 0x1e, 0x00, 0x11, 0xfb, 0x9c, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00, 0x3e, 0x07, 0x80, 0x00,
    0x1e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x1e, 0x07, 0xc0, 0x00, 0x3f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x09, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0x9e, 0x00,
    0x00, 0x01, 0xff, 0x20, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x01, 0x80, 0xe0, 0x00, 0x03, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xe0,
    0x00, 0x23, 0xff, 0xe0, 0x01, 0xe0, 0x3e, 0xc0, 0x01, 0xf1, 0x3c, 0x00, 0x01, 0xff, 0xbc, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x3f, 0x0f, 0x80, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x3e, 0x07, 0x00, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x1f, 0x0f, 0xc0, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xfd, 0x80, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x01, 0xff, 0x00,
    0x00, 0x03, 0xff, 0x00, 0x00, 0x01, 0xf7, 0xf0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x03, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xc0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x03, 0xe3, 0xc0,
    0x00, 0x40, 0x7f, 0xe0, 0x03, 0xe0, 0x7f, 0xc0, 0x03, 0xe7, 0x78, 0x80, 0x03, 0xff, 0xb8, 0x00,
    0x03, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0x80, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00,
    0x7e, 0x07, 0xc0, 0x00, 0x1e, 0x07, 0xe0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x06, 0x7c, 0x00, 0x00,
    0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x80, 0x00, 0x01, 0xff, 0x80,
    0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xe0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x02, 0xe3, 0xc0,
    0x00, 0x00, 0x7f, 0xc0, 0x03, 0xc4, 0x7f, 0xc0, 0x07, 0xef, 0x79, 0x80, 0x03, 0xff, 0xb0, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x07, 0xdf, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0x80, 0x00,
    0x7e, 0x07, 0xe0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00,
    0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x07, 0x3e, 0x00, 0x00,
    0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x80, 0x00, 0x00, 0xff, 0xc0,
    0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x00, 0xe3, 0x80,
    0x00, 0x00, 0xff, 0x80, 0x03, 0x1d, 0xff, 0x80, 0x07, 0xbe, 0xe7, 0x80, 0x0f, 0xfe, 0x22, 0x00,
    0x0f, 0xfe, 0x00, 0x00, 0x07, 0xde, 0x00, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00,
    0x7e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x07, 0xfe, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00,
    0x03, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x80, 0x00, 0x01, 0xff, 0x80,
    0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0xf7, 0x80, 0x00, 0x00, 0xc1, 0xe0, 0x00, 0x07, 0xc0, 0xf0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0xc0, 0xf0, 0x00, 0x07, 0xc1, 0xc0, 0x00, 0x00, 0xe3, 0xc0,
    0x00, 0x00, 0xff, 0x80, 0x03, 0x8c, 0xff, 0xc0, 0x07, 0xdf, 0xf3, 0x80, 0x07, 0xff, 0x21, 0x00,
    0x07, 0xff, 0x00, 0x00, 0x07, 0xde, 0x00, 0x00, 0x1f, 0x0f, 0x00, 0x00, 0x3e, 0x07, 0xe0, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x7e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0xc0, 0x00, 0x0f, 0x0f, 0x00, 0x00,
    0x07, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x07, 0x9e, 0x00, 0x00,
    0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, /*
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x70, 0x80, 0x00, 0x00, 0x7f, 0xc0,
    0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xf7, 0xc0, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x07, 0x80, 0xf0, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x00, 0xe3, 0xf0,
    0x00, 0x11, 0xff, 0x80, 0x02, 0x3f, 0xff, 0x00, 0x07, 0x7e, 0xc7, 0x80, 0x0f, 0xfc, 0x06, 0x00,
    0x1f, 0xfe, 0x00, 0x00, 0x0f, 0xdf, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00,
    0x3e, 0x07, 0xc0, 0x00, 0x7e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x2f, 0xff, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x03, 0xff, 0x00, 0x00, 0x07, 0xc6, 0x00, 0x00,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, */
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x3d, 0xc0,
    0x00, 0x00, 0x7f, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x03, 0x80, 0xe0, 0x00, 0x01, 0xc0, 0xf0, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x01, 0xe3, 0xf0,
    0x00, 0x33, 0xff, 0x80, 0x00, 0x7d, 0xff, 0x00, 0x06, 0x7c, 0x8f, 0x00, 0x0f, 0xfc, 0x0f, 0x00,
    0x1f, 0xfe, 0x80, 0x00, 0x1f, 0xdf, 0xc0, 0x00, 0x0f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00,
    0x1e, 0x07, 0xc0, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x00, 0x00,
    0x3f, 0xff, 0x80, 0x00, 0x03, 0xff, 0x80, 0x00, 0x03, 0xff, 0x00, 0x00, 0x03, 0xe2, 0x00, 0x00,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
  } /* ,
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3e, 0xc0,
    0x00, 0x03, 0x7f, 0xe0, 0x00, 0x03, 0xf7, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x07, 0xc0, 0xc0,
    0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0xc0, 0xe0, 0x00, 0x01, 0xc1, 0xf0, 0x00, 0x03, 0xe3, 0xf0,
    0x00, 0x73, 0xff, 0xe0, 0x00, 0x79, 0xff, 0x00, 0x08, 0xf8, 0x1e, 0x00, 0x0f, 0xf8, 0x0e, 0x00,
    0x1f, 0xff, 0x80, 0x00, 0x3f, 0xdf, 0xc0, 0x00, 0x1f, 0x0f, 0xc0, 0x00, 0x0e, 0x07, 0xc0, 0x00,
    0x0e, 0x07, 0x80, 0x00, 0x1e, 0x07, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x3f, 0x0f, 0x80, 0x00,
    0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00,
    0x01, 0xe0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
  } */
};

RF24 radio(9, 10); // CE, CSN pin
const byte addresses[][6]  = {{'R', 'x', 'G', 'Y', 'A'},  {'T', 'x', 'G', 'E', 'o'}};
const int  channel    = 100;     // set channel 2.400GHz ( b0 ) - 2.524GHz ( b124 );
const char ping[]   = "b06a5f1ab41c7bd0705b0b85843a";   // ping code (public key randum)
const char code_s[] = "b067becac7f8a1059356ccbf278e";   // max size 32bytes
const char code_r[] = "0ceab8e71268fe7d44f36cc93d10";
char receive_buf[32] = "";

int n = sizeof (gears_array) / sizeof (gears_array[0]);
int _frame = 0;

bool EN_SECURITY = false; // enabled security , status

// Variables for setting the time / agusment delta = set - show_now
long delta_stampTimeSet = 0 ;
float battery_voltage;
QueueArray<float> battery_measurements;

void setup() {
  pinMode( FB_D        , INPUT );
  pinMode( FB_L        , INPUT );
  pinMode( BATTERY_ADC , INPUT );
  pinMode( RF_signal   , INPUT );
  pinMode( buzzer      , OUTPUT );
  pinMode( TILT_AMPULA , INPUT_PULLUP );
  // ENABLE SHTIFTS
  pinMode( SERVO_DOOR_ENABLE      , OUTPUT ); // connect internal mos to GND when is logic 0 ( not open colector )!
  pinMode( SERVO_LOCK_ENABLE     , OUTPUT );
  digitalWrite( SERVO_LOCK_ENABLE,  0 ); // disable shtifts
  digitalWrite( SERVO_DOOR_ENABLE,  0 );

  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  SCREEN_ALLOCATION = display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32
  if ( !SCREEN_ALLOCATION ) {
    Serial.println(F("SSD1306 allocation failed"));
  }
  display.clearDisplay();

  // NRF24L01 begin setup
  radio.begin();
  radio.openWritingPipe(addresses[0]); // 00001
  radio.openReadingPipe(1, addresses[1]); // 00002
  radio.setPALevel(RF24_PA_MIN);

  radio.setDataRate(RF24_250KBPS);
  radio.setChannel(100);

  radio.disableDynamicPayloads();
  radio.setAutoAck(false);

  tone( buzzer, ((SCREEN_ALLOCATION) ? 1320 : 740), 50); // signal for start loop

  Serial.println("START");
  // wait 6s
  delay(6000);
  Serial.println("6s.");

  // go servo to unlock position
  go_servo( SECURE ); // go close and lock

  delay(100);
}


/**
   ===============================================================================
   ==== LOOP =====
   ===============================================================================
*/
void loop() {

  if ( SCREEN_ALLOCATION )
  {
    disp_ownerInfo();
    intrpt_delay(3500);

    for ( int i = 0; i < 3 ; i++ ) {
      disp_securityStatus();
      intrpt_delay((EN_SECURITY) ? 400 : 750);
    }
    disp_time();

    intrpt_delay(1500);

    //disp_battery_status();
    //intrpt_delay(1000);
  }
  else /* only check */
    intrpt_delay(10);
}

void intrpt_delay( int _milliseconds ) {
  long feature_time =  millis() + _milliseconds;
  while ( millis() < feature_time ) {
    check_RF() ;
    // check_serial_comport_pc();
    // check_battery_level();
  }
}


/**
   INTERUPTI :
*/
void check_battery_level() {
  // read ADC value bites * ADC referent voltage(AREF) / resolution ADC
  float voltage = ( analogRead( BATTERY_ADC ) * 5.09 ) / 1023 ; // * voltage per separate
  voltage *= 4.30;

  int n = battery_measurements.count();
  if ( n  >= 10 ) { // get 10 elements and delete measurement
    battery_voltage = 0;
    while ( !battery_measurements.isEmpty () ) { // foreach queue
      battery_voltage += battery_measurements.dequeue();

    }
    battery_voltage /= n ;
  }

  battery_measurements.push( voltage );
}

void check_serial_comport_pc() {
  // if serial connected -> show menu option
  if ( Serial.available() > 0 ) {
    Serial.println(F("MENU >_"));
    String _read = Serial.readString();
    _read.toUpperCase();

    if ( _read.indexOf( "TIME" ) >= 0  ) {
      Serial.println(F("TIME > Insert seconds to set >_"));
      while (1) {
        if ( Serial.available() > 0 ) {
          delta_stampTimeSet = (Serial.readString().toInt()) - (millis() / 1000);
          Serial.print(F("SET."));
          return;
        }
      }
    }
    else if ( _read.indexOf( "UNLOCK" ) >= 0  ) {
      if ( SCREEN_ALLOCATION ) disp_RFinit();
      delay(100);

      if ( digitalRead( TILT_AMPULA ) == 1 ) { // not leveled
        error_message( F("Hold at incorrect level!") );
        return;
      }

      tone( buzzer, 1047 , 100);
      if ( SCREEN_ALLOCATION ) disp_RFvalid();
      go_servo( UNSECURE ); // GO SERVO UNLOCK AND OPEN
    }
  }
}

void check_RF() {
  /* listening for RF unlock signal
     unlock, validate unlock and open */
  // LISTENING
  radio.startListening();
  if ( radio.available() ) {
    radio.stopListening();

    // READ [ping]
    clear_receivebuf();
    radio.read(&receive_buf, sizeof(receive_buf));

    Serial.print(F("receive ping: "));
    Serial.println(receive_buf);

    // IF is ping
    if ( strcmp(receive_buf, ping) == 0) {

      Serial.println(F("ping ok."));

      // WRITE [code_s]
      int stat = radio.write(&code_s, sizeof(code_s));
      Serial.print(F("response [code_s] = "));
      Serial.println(stat);
      delay(1);

      // LISTENING
      radio.startListening();
      int timeout = 200; // 200ms.
      disp_RFinit();
      delay(100);
      Serial.println(F("LISTENING code_r... "));
      while ( timeout > 0 ) {
        timeout--;
        if ( radio.available() ) {
          radio.stopListening();

          // READ [code_r]
          clear_receivebuf();
          radio.read(&receive_buf, sizeof(receive_buf));
          Serial.println( receive_buf );

          // Check code_r is valid
          if ( strcmp(receive_buf, code_r) == 0) {
            disp_RFvalid();
            goto VALID_TODO;
          }

          clear_availableFIFO();
          return;
        }
        delay(1);
      }
      Serial.println("timeout request [code_r]");
      goto VALID_TODO;
      clear_availableFIFO();
    }
  }
  return;

VALID_TODO:
  if (  EN_SECURITY == true ) {
    if ( digitalRead( TILT_AMPULA ) == 1 ) { // not leveled
      error_message( F("Hold at incorrect level!") );
      return;
    }
  }
  tone( buzzer, 1047 /* C6 */ , 100);

  go_servo( (EN_SECURITY) ? UNSECURE : SECURE ); // GO SERVO UNLOCK AND OPEN
  delay(1000);
}

/*
  void check_motion() {
  digitalWrite( SERVO_DOOR_ENABLE, 1 ); // enable power to servo for measuring pullup
  delay(1); // await register shift and read from ADC
  int angle_now = map( analogRead(FB_D), 152, 336, 0, 180 );
  digitalWrite( SERVO_DOOR_ENABLE, 0 );

  #ifdef DEBUG_MOTION
  Serial.print("a[");
  Serial.print( angle_now);
  Serial.print("];");
  Serial.println();
  #endif

  if ( angle_now < AC_ANGLE ) {
    go_servo( SECURE );
    delay(10);
  }
  }
*/




/**
   ===============================================================
  * * * Servo controller * * *
   ===============================================================
     + Exponencial motion
     + feedback read
     + map( analogRead(A1), 57,  590, 0, 180 )
     + map( analogRead(A0), 152, 336, 0, 180 )
   position lock mechanisum:
*/ int   /*unlock  s[1]*/  S1U  = 100, /* s[2] */ S2U = 0,  /*
           lock    s[1]*/  S1L  = 30,  /* s[2] */ S2L = 90; /*
*/
void go_servo( byte activ ) {
  // DEBUG
  Serial.print("go_servo(");
  Serial.print( (activ == UNSECURE) ? "unsecure" : "secure");
  Serial.print(")");
  Serial.println("");

  if ( activ == SECURE ) { // LOCK PROCEDURE
    go_enable_servos();

    // unlock mechanisum + set position start pwm;
    servos[0].write(90);
    servos[1].write(S1U);
    servos[2].write(S2U);

    go_exp_motion_servo( 0 ); // close

    // lock
    servos[1].write(S1L);
    servos[2].write(S2L);
    delay(900);

    go_disable_servos();
    EN_SECURITY = true;

  }

  if ( activ == UNSECURE ) { // UNLOCK PROCEDURE
    go_enable_servos();

    // unlock mechanisum + set posirion start pwm;
    servos[0].write(DOOR_LEVEL_CLOSED);
    servos[1].write(S1U);
    servos[2].write(S2U);

    delay(900);
    // disable lock mechanisum
    servos[1].detach();
    servos[2].detach();

    go_exp_motion_servo( 1 ); // open

    go_disable_servos();
    EN_SECURITY = false;
  }

}


void go_exp_motion_servo( int _direction ) { // 1 - open, 0 - close

  /* ==========================================================
       REGULATOR VAR's
       coefficient's( a1, a2, c1, c2 ) regulate curve
  */
  double delta_t = 10;  /* Δtime 10ms */
  int    scale_up_factor = DOOR_LEVEL_OPEN ;

  double a = -3,     /* accel open slope */
         c = 7.2  ;  /* half point of slope   */
  double y ;         /* var for function result  */
  int n = 1000;      /* assign No. of point plot */

  // points(i) in interval [ n_0 - n_x1000 ]
  int n_0 = 680; // 763
  int n_x = 850;

  /* ============= DIRECTION CHECK ============================*/
  if ( _direction == 1 ) // IF DIR OPEN
  {
    Serial.println( "go_exp_motion_servo(open)" );

    // procedure motion open to limit exponencial
    for ( int i = n_0; i < n_x ; i++ ) // foreach points(i) in interval [ 0 - 1000 ]
    {
      double f = ( delta_t / n ) * i;
      y = 1 / (1 + exp( a * (f - c) )); // calc curve motion
      y *= scale_up_factor;       // scale up factor *130
      y += DOOR_LEVEL_CLOSED;

      disp_animationProcess(); // interrupt to show next frame


      servos[0].write( y );

#ifdef DEBUG_EXP
      Serial.print("i[");
      Serial.print(i);
      Serial.print("]  y[");
      Serial.print(y);
      Serial.println();
#endif

    }
  }
  else  // IF DIR CLOSE
  {
    Serial.println( "go_exp_motion_servo(close)" );
    int i = DOOR_LEVEL_OPEN;
    for ( ; i > DOOR_LEVEL_CLOSED; i-- ) {
      disp_animationProcess(); // interrupt to show next frame
      servos[0].write( i );
      delay(20);
    }
  }
}


// ENABLE servo's
void go_enable_servos() {
  // set pin attach
  servos[0].attach(3);
  servos[1].attach(4);
  servos[2].attach(5);
  digitalWrite( SERVO_DOOR_ENABLE, 1);
  digitalWrite( SERVO_LOCK_ENABLE, 1);
  delay(10);

#ifdef DEBUG_SERVOS_P
  Serial.println("ENABLED SERVOS");
#endif
}

// DISABLE servo's
void go_disable_servos() {
  digitalWrite( SERVO_DOOR_ENABLE, 0 ); // interupt servo power- reset automaticly position hold
  digitalWrite( SERVO_LOCK_ENABLE, 0 );
  for ( int i = 0; i < sizeof(servos); i++ ) {
    servos[i].detach();
  }
  delay(10);

#ifdef DEBUG_SERVOS_P
  Serial.println("DISABLED SERVOS");
#endif

}









/**
   ================================================================
  * * * DISPLAY FRAME's * *
   create function disp_< frame_name > for anyone frame
   ================================================================
   disp_ownerInfo();
   disp_securityStatus();
   disp_time();
   disp_animationProcess();
   disp_RFinit();
   disp_RFvalid();
   disp_battery_status();
   ================================================================
*/
void disp_ownerInfo() {
  display.clearDisplay();
  // draw logo
  display.fillRect(0, 0, 7, 32, SSD1306_WHITE); // първи вертикален
  display.fillRect(7, 0, 14, 7, SSD1306_WHITE); // висок хоризонтален до триъгълника
  display.fillRect(7, 25, 25, 7, SSD1306_WHITE); // долен хоризонтален
  display.fillRect(12, 12, 8, 8, SSD1306_WHITE); // квадрата в средата 10x10
  display.fillRect(25, 15, 7, 16, SSD1306_WHITE); // вертикален отдясно
  display.fillTriangle(20, 0,  20, 6,  26, 6, SSD1306_WHITE); // триъгълника

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(40, 2 );
  display.print(F("Georgi"));
  display.setCursor(40, 11 );
  display.print(F("Chakarov"));
  display.setCursor(40, 24 );
  display.print(F("0/879-689-408"));

  display.display();
}

void disp_securityStatus() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);

  if ( EN_SECURITY ) {
    display.drawBitmap( 0, 0, icon_lock, 32, 32, 1 );
    display.setCursor( 37 , 10 );
    display.print(F("LOCKED"));
  } else {
    display.setCursor( random(0, 30) , random(0, 18) );
    display.print(F("UNSECURE"));
  }

  display.display();
}

void disp_time() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);

  unsigned long Now = (millis() / 1000) + delta_stampTimeSet;
  int seconds = Now % 60;
  int minutes = ( Now / 60 ) % 60;
  int hours   = ( Now / 3600 ) % 24;

  print_dec_clock(hours);
  display.print(":");
  print_dec_clock(minutes);
  display.print(":");
  print_dec_clock(seconds);
  display.println();

  display.setTextSize(1);
  display.println(F("UTC+2 BG located"));
  display.display();
}

void disp_animationProcess() {
  if ( (_frame + 1) <= n ) {
    display.clearDisplay();
    display.drawBitmap(0, 0, gears_array[_frame], 30, 30, 1);
    //delay(8);

    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor( 38 , 10 );
    display.print(F("PROCESS"));
    display.display();
    _frame++;
  } else {
    _frame = 0;
  }
}

void disp_RFinit() {
  display.clearDisplay();

  for (int16_t i = 0; i < 14; i += 2) {
    display.drawRoundRect(i, i, 64 - 2 * i, 32 - 2 * i, 8, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(75, 6);
  display.println(F("RF"));
  display.display();
}

void disp_RFvalid() {
  display.clearDisplay();

  for (int16_t i = 0; i < 14; i += 2) {
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, 64 - 2 * i, 32 - 2 * i, 8, SSD1306_INVERSE);
    display.display();
    delay(1);
  }
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(75, 6);
  display.println(F("RF"));
  display.setTextSize(1);
  display.setCursor(75, 25);
  display.println(F("validate"));
  display.display();

}

void disp_battery_status() {
  display.clearDisplay();

  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print(F("Battery level:"));
  display.print( battery_voltage );

  display.setCursor(0, 10);
  display.setTextSize(2);
  if ( battery_voltage < 7 ) {
    display.print( F("LOW BAT!") );
  } else {
    display.print( map( battery_voltage, 7 , 8.3 , 10 , 100 ) );
    display.print(F("%"));
  }

  display.display();
}


/**
   =================================================================
   ANOTHER FUNCTION
   + display show
   =================================================================
*/
void error_message( String _exeption ) {
  go_disable_servos();

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.println(F("Exeption:"));
  display.setTextSize(1);
  display.println( _exeption );
  display.display();

  // error beep times
  for ( int i = 0; i < 8 ; i++ ) {
    tone( buzzer, 988, 100 );
    delay(200);
  }
  delay(4000);
}

void print_dec_clock(int n) {
  if (n < 10) display.print('0');
  display.print(n);
}

void clear_availableFIFO() {
  radio.stopListening();
  char receive_buf[32] = "";
  int stack_n = 0;
  int timeout = 3000;
  while (radio.available()) {
    radio.read(&receive_buf, sizeof(receive_buf));// read and clear
    Serial.print("clear buf/");
    Serial.print(stack_n);
    Serial.print("/");
    Serial.println(receive_buf);
    stack_n++;
    timeout--;
    if ( timeout < 1 ) {
      return;
    }
  }
}

void clear_receivebuf() {
  receive_buf[32] = "";
}
